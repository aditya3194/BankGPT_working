import streamlit as st
import cohere
import random
import time
import openai

# App title
st.set_page_config(page_title="India MoF-WIP")

# Define a dictionary of user inputs and corresponding responses (rule-based)
responses = {
    "balance": "Your account balance is $5,000.",
    "transaction history": "You have three recent transactions: \n1. $100 deposit on 2023-09-25 \n2. $50 withdrawal on 2023-09-24 \n3. $200 deposit on 2023-09-23",
    "interest rates": "The current interest rate for savings accounts is 2.5% per annum.",
    "contact info": "You can reach our customer support at support@bank.com or call us at +1-800-123-4567.",
    "help": "I'm here to provide information about your account and our services. How can I assist you today?",
   'рдирдорд╕реНрддреЗ! рдореИрдВ рдПрдХ рдлрд┐рдХреНрд╕реНрдб рдбрд┐рдкреЙрдЬрд┐рдЯрддреЛрдбрд╝рдиреЗ рдХреЗ рд▓рд┐рдП рдПрдХ рдлреЙрд░реНрдо рднрд░рдирд╛ рдЪрд╛рд╣рддрд╛ рд╣реВрдБред ' : 'рдмрд┐рд▓реНрдХреБрд▓, рд╣рдо рдЖрдкрдХреА рдорджрдж рдХрд░реЗрдВрдЧреЗредрдХреГрдкрдпрд╛ рдлреЙрд░реНрдо рдФрд░ рдЖрд╡рд╢реНрдпрдХ рджрд╕реНрддрд╛рд╡реЗрдЬрдЬреИрд╕реЗ рдЖрдзрд╛рд░ рдХрд╛рд░реНрдб рдФрд░рдкреИрди рдХрд╛рд░реНрдб рдХреА рддрд╕реНрд╡реАрд░реЗрдВ рдЕрдкрд▓реЛрдбрдХрд░реЗрдВред ,' ,
'рдареАрдХ рд╣реИ, рдПрдХ рдорд┐рдирдЯред ' : 'рдзрдиреНрдпрд╡рд╛рдж! рдЖрдкрдХреЗ рджреНрд╡рд╛рд░рд╛ рдЕрдкрд▓реЛрдб рдХреА рдЧрдИ рдЬрд╛рдирдХрд╛рд░реАрдХреЛ рд╕реБрд░рдХреНрд╖рд┐рдд рд░реВрдк рд╕реЗ рдкреНрд░рд╛рдкреНрддрдХрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред рдЕрдмрд╣рдо рдЖрдкрдХреЛ рдХрджрдо-рд╕реЗ-рдХрджрдо рдмрддрд╛рдПрдВрдЧреЗ рдХрд┐рдлреЙрд░реНрдо рдХреИрд╕реЗ рднрд░реЗрдВред рд╕рдмрд╕реЗрдкрд╣рд▓реЗ, рдлреЙрд░реНрдо рдХрд╛ рдкрд╣рд▓рд╛ рдкреНрд░рд╢реНрдирд╣реИ, рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рдирд╛рдо рд╡реИрд╕рд╛рд╣реА рднрд░реЗрдВ рдЬреИрд╕рд╛ рдХрд┐рдЖрдкрдХреЗ рдЖрдзрд╛рд░ рдХрд╛рд░реНрдб рдореЗрдВрд╣реИред рдЖрдкрдХрд╛ рдирд╛рдо рд╣реЛрдирд╛рдЪрд╛рд╣рд┐рдП "рдЕрдиреБрд░рд╛рдЧ рд╢рд░реНрдорд╛" ' ,
'рдХреНрдпрд╛ рдореБрдЭреЗ рдЕрдкрдирд╛ рдордзреНрдп рдирд╛рдо рднреА рджрд░реНрдЬ рдХрд░рдирд╛ рд╣реИ? ' : 'рдирд╣реАрдВ | рдХреНрдпрд╛ рдЖрдкрдХрд╛ рдЦрд╛рддрд╛ рд╕реНрдерд╛рдиреАрдп рд╣реИ, рдпрд╛ NRE/NRO рд╣реИ?ред' ,
'рдореЗрд░реЗ рдкрд╛рд╕ рдХреЗрд╡рд▓ рд╕реНрдерд╛рдиреАрдп рдмрдЪрдд рдЦрд╛рддрд╛ рд╣реИред' : 'рдареАрдХ рд╣реИ, рдХреГрдкрдпрд╛ рдЙрд╕реЗ рдЯрд┐рдХ рдХрд░реЗрдВред рдЗрд╕рдХреЗ рдмрд╛рдж, рдкреНрд░рд╢реНрди 4 рдХреЗ рд▓рд┐рдП, рдХреГрдкрдпрд╛рдЙрд╕ рдлрд┐рдХреНрд╕реНрдб рдбрд┐рдкреЙрдЬрд┐рдЯ рдХреА рд╕рдВрдЦреНрдпрд╛ рднрд░реЗрдВ рдЬрд┐рд╕реЗ рдЖрдк рд░рджреНрдж рдХрд░рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВред' ,
'рдареАрдХ рд╣реИ, рдореИрдВ рдпрд╣ рднреА рднрд░ рд░рд╣рд╛ рд╣реВрдВред ' : 'рд╢рд╛рдирджрд╛рд░! рдЕрдм рдЖрдкрдХреЛ рдПрдХ рдЕрдВрддрд┐рдордмрд╛рд░ рдлреЙрд░реНрдо рдХреА рдЬрд╛рдБрдЪ рдХрд░рдХреЗ рд╕рдмрдорд┐рдЯ рдХрд░рдирд╛ рд╣реИред рдХреГрдкрдпрд╛ рд╡рд┐рд╢реЗрд╖ рдзреНрдпрд╛рди рджреЗрдВ рдХрд┐ рдЖрдкрдиреЗ рд╕рднреА рдЬрд╛рдирдХрд╛рд░реА рд╕рд╣реА рд╕реЗ рднрд░реА рд╣реИ рдФрд░ рд╕рд╛рд░реЗ рдЖрд╡рд╢реНрдпрдХ рджрд╕реНрддрд╛рд╡реЗрдЬ рд╕рдВрд▓рдЧреНрди рдХрд┐рдП рд╣реИрдВред' ,
'рдлрд╝реЙрд░реНрдо рдореЗрдВ рд╕рдм рдХреБрдЫ рдареАрдХ рд╣реИред' : 'рдмрд╣реБрдд рдЕрдЪреНрдЫрд╛! рдЕрдм рдХреГрдкрдпрд╛ рдиреАрдЪреЗ рджреА рдЧрдИ рддрд╕реНрд╡реАрд░ рдХреЗ рдЕрдиреБрд╕рд╛рд░ рдлрд╝реЙрд░реНрдо рдкрд░ рд╣рд╕реНрддрд╛рдХреНрд╖рд░ рдХрд░реЗрдВред' ,
'рд╣реЛ рдЧрдпрд╛' : '"рд╕реНрдерд╛рди" рдХреЗ рд▓рд┐рдП, рдХреГрдкрдпрд╛ рдореБрдВрдмрдИ рд▓рд┐рдЦреЗрдВ рдФрд░ "рддрд╛рд░реАрдЦ" рдХреЗ рд▓рд┐рдП, рдХреГрдкрдпрд╛ рдЖрдЬ рдХреА рддрд╛рд░реАрдЦ рдбрд╛рд▓реЗрдВ, рдЬреЛ рдХрд┐ 1 рдЕрдХреНрдЯреВрдмрд░ 2023 рд╣реИред рдХреГрдкрдпрд╛ рдЗрд╕рдХреЗ рдмрд╛рдж рдлрд╝реЙрд░реНрдо рд╕рдмрдорд┐рдЯ рдХрд░реЗрдВред рдореИрдВ рдПрдХ рдбрд┐рдЬрд┐рдЯрд▓ рдХреЙрдкреА рднреА рд╕рдмрдорд┐рдЯ рдХрд░ рд░рд╣рд╛ рд╣реВрдБред' ,
'рдареАрдХ рд╣реИ, рдореИрдВ рдЕрдм рдлреЙрд░реНрдорд╕рдмрдорд┐рдЯ рдХрд░ рд░рд╣рд╛ рд╣реВрдБред ' : 'рдХреЛрдИрдЕрдиреНрдп рд╕рд╣рд╛рдпрддрд╛ рдХреА рдЖрд╡рд╢реНрдпрдХрддрд╛ рд╣реЛрддреЛ рдмрддрд╛рдПрдВред' ,
'рдзрдиреНрдпрд╡рд╛рдж, рдЖрдкрдХреА рдорджрдж рдХреЗ рд▓рд┐рдПред ' : 'рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! рдХрд┐рд╕реА рднреА рд╕рдордп рд╕рд╣рд╛рдпрддрд╛ рдХреЗ рд▓рд┐рдП рд╣рдо рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред' ,


}

# with st.sidebar:
#        st.title('India MoF')

#        st.text('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') # OPenAI key
#        openai.api_key = st.text_input('Add your Open AI API Key')
       
#     #    st.text('c6pobgap7gKlXOuU29e97W3Q0A2mJhg01hfbWwlJ') # Cohere Key
#     #    cohere_api_key = st.text_input('Add your Cohere API Key')
# 	#    cohere_api_key = 'c6pobgap7gKlXOuU29e97W3Q0A2mJhg01hfbWwlJ'

#        st.button('Proceed!')
#        st.warning('Please enter your credentials and click proceed!', icon='тЪая╕П')
#     #    if not (cohere_api_key):
#     #           st.warning('Please enter your credentials!', icon='тЪая╕П')
#     #    else:
#     #           st.success('Proceed to entering your prompt message!', icon='ЁЯСЙ')

cohere_api_key = 'c6pobgap7gKlXOuU29e97W3Q0A2mJhg01hfbWwlJ'
co = cohere.Client(cohere_api_key)

# Store LLM generated responses
if "messages" not in st.session_state.keys():
    st.session_state.messages = [{"role": "assistant", "content": "рдирдорд╕реНрддреЗ! рдХреИрд╕реЗ рдорджрдж рдХрд░ рд╕рдХрддрд╛рд╣реВрдБ?"}]

# Display chat messages
for message in st.session_state.messages:
    with st.chat_message(message["role"]):
        st.write(message["content"])
chat_history = []

# openai.api_key = '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'
# OpenAI function
def generate_response_oi(prompt_input):
        response = openai.ChatCompletion.create(
  			model="gpt-3.5-turbo",
			messages=[
					{"role": "system", "content": "You are a helpful assistant."},
					{"role": "user", "content": prompt_input},
				]
				)
        user_message = {"user_name": "User", "text": prompt_input}
        bot_message = {"user_name": "Chatbot", "text": response['choices'][0]['message']['content']}
        chat_history.append(user_message)
        chat_history.append(bot_message)
        return response['choices'][0]['message']['content']

# Cohere function
def generate_response_co(prompt_input):
		response = co.chat(
		prompt_input, 
		model="command-nightly", 
		# chat_history= chat_history,
		temperature=0.3
		)
		user_message = {"user_name": "User", "text": prompt_input}
		bot_message = {"user_name": "Chatbot", "text": response.text}
		chat_history.append(user_message)
		chat_history.append(bot_message)
		
		return response.text

def file_uploader():
      uploaded_file = st.file_uploader('Upload relevant documents',accept_multiple_files=True)
      time.sleep(5)
      return uploaded_file

def image_show():
      st.image("https://github.com/aditya3194/BankGPT_working/blob/1e3caf5ee8ba084b368f8fc017c9a4b14254780b/signature.png", caption="Form Preview", use_column_width=True)
      


# User-provided prompt
if prompt := st.chat_input():
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.write(prompt)

load ='''
    Instructions: Consider that you are helpful chatbot for Indian bank employee, helping customer in every possible way by respondnig them back with human like conversation.
'''

if st.session_state.messages[-1]["role"] != "assistant":
    with st.chat_message("assistant"):
        with st.spinner("Thinking..."):
                if prompt in responses:
                        time.sleep(random.randint(1,3))
                        response = responses[prompt]
                        if prompt in ("рдареАрдХ рд╣реИ, рдПрдХ рдорд┐рдирдЯред "):
                                file = file_uploader()
                        if prompt in ("рдлрд╝реЙрд░реНрдо рдореЗрдВ рд╕рдм рдХреБрдЫ рдареАрдХ рд╣реИред"):
                              file = image_show()
                              time.sleep(5)
                            
                else:
                        response = generate_response_co(load+prompt)
                        # response = generate_response_oi(load+prompt)
    st.write(response)
    message = {"role": "assistant", "content":response}
    st.session_state.messages.append(message)
